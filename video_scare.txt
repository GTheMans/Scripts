# === Lock Input Functions ===

Add-Type @"
using System;
using System.Runtime.InteropServices;
public class User32 {
    [DllImport("user32.dll")]
    public static extern bool BlockInput(bool fBlockIt);
}
"@

Write-Host "Video Scare Script Started..."

# Wait for mouse movement
Add-Type -AssemblyName System.Windows.Forms
$initialPosition = [System.Windows.Forms.Cursor]::Position
Write-Host "Waiting for mouse movement to trigger..."
do {
    Start-Sleep -Milliseconds 500
    $currentPosition = [System.Windows.Forms.Cursor]::Position
} while ($initialPosition.X -eq $currentPosition.X -and $initialPosition.Y -eq $currentPosition.Y)

Write-Host "Mouse movement detected! Initiating scare sequence..."

# Immediately lock input
[User32]::BlockInput($true)
Write-Host "Input locked."

# === Start Independent Failsafe Unlock ===

Start-Process powershell.exe -WindowStyle Hidden -ArgumentList "-NoProfile -Command `"Start-Sleep -Seconds 30; Add-Type -TypeDefinition 'using System; using System.Runtime.InteropServices; public class User32 { [DllImport(\""user32.dll\"")] public static extern bool BlockInput(bool fBlockIt); }'; [User32]::BlockInput(\$false)`""
Write-Host "Failsafe Unlock Timer Launched (External Process, 30s)."

# === Fake crash popup ===
Add-Type -AssemblyName PresentationFramework
[System.Windows.MessageBox]::Show("CRITICAL_SYSTEM_FAILURE (0x00000F4) - Windows has encountered a critical error and must shut down.", "System Error", "OK", "Error")

# 3 second dramatic delay after crash popup
Start-Sleep -Seconds 3

# === Play Horror Video ===

# Download video file
$videoUrl = "https://github.com/GTheMans/Scripts/raw/refs/heads/main/skull.mp4"
$videoPath = "$env:TEMP\skull.mp4"

Write-Host "Downloading horror video..."
Invoke-WebRequest -Uri $videoUrl -OutFile $videoPath -UseBasicParsing

Write-Host "Video downloaded successfully. Playing now..."

# Launch video in full-screen
$player = New-Object -ComObject WMPlayer.OCX
$media = $player.newMedia($videoPath)
$player.currentPlaylist.appendItem($media)
$player.settings.setMode("loop", $false)
$player.controls.play()
$player.fullScreen = $true

# Wait for video playback (15 seconds)
Start-Sleep -Seconds 15

# Stop and close player after video
$player.controls.stop()
$player.close()
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($player) | Out-Null
Remove-Variable player

Write-Host "Video playback completed. WMP closed cleanly."

# 5 second buffer after video
Start-Sleep -Seconds 5

# Manual unlock input (even though failsafe exists)
[User32]::BlockInput($false)
Write-Host "Input manually unlocked after 20 seconds."

# Exit script cleanly
exit
